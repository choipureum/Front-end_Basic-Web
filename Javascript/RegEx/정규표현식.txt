< 정규 표현식, Regular Expression >

 - 특정 규칙을 가진 문자열이나 문자열 집합을 표현하는데 사용하는 형식 언어

 - 문자열에서 특정 패턴의 문자열을 검색하거나 치환할 때 사용한다

 - 형식에 맞는 데이터를 입력했는지 검증할 때 사용한다(<form>검증,  Validation)

 - 정규식이라고도 불린다

 
< 정규 표현식 생성 방법 >

 1. 정규식 리터럴 상수
	정규식을 '/'(슬래시)로 감싸는 방법으로 표현한다
	ex) var regEx = /abc/

 2. RegExp 객체를 생성
	RegExp 객체의 생성자 함수를 호출하는 방법으로 표현
	ex) var regObj = new RegExp("abc")

 
<  정규표현식 사용 패턴 >

 1. 단순패턴
	완전히 일치하는 문자열을 대응시킬 때 사용
	ex) /abc/ -> "abc"
	    /Hello/ -> "Hello RegExp"

 2. 특수 문자 패턴
	특수한 형식의 패턴을 적용하여 문자열을 대응시킬 때 사용
	
< 정규식 특수 문자 >

  - \
	다음 문자로 오는 값이 특수문자가 아니라 평범한 문자임을 알림

	ex) /a*/  : a뒤에 몇개든 올수잇음(a가 0개 이상인 패턴)
	    /a\*/ : a* 인 단순패턴 - 진짜로 a*

	뒤에오는 문자와 합쳐서 특수 문자가 되기도 함
	ex) /\d/  -숫자(digit)

 - ^ (carrot)
	데이터의 시작에 매칭
	
	ex) /^A/ - 문자열의 시작이 대문자A인 패턴
	    	
	    "an A" - 매칭되지 않음 
	    "A b" - 매칭
	    "An" - 매칭

	    /A/  - 문장이 아니라 A로 시작하는 모든 A를 다찾음

 - $
	데이터의 끝에 매칭
	
	ex) /t$/ - 끝이 t 로 끝나야함
	
	    "eater" - 매칭되지않음
	    "eat" - 매칭
 
 ** ^와 $를 같이 사용할 때 의미
	
	ex) /^eat$/ - e로 시작되고 가운데 a라는 글자가 존재하고  마지막이 t로 끝나는 문자열 -결국 eat
	
	<form> 검증(validation)할 때 사용하는 패턴 
	입력된 온전한 단어만 검사할 때 사용한다
	
	
 - *
	0회 이상 연속으로 반복되는 문자(앞문자중 1개만 존재하면 나머지는 모든 문자 상관없음)
	{0,}로 표현하기도 한다 / {최솟값, 최댓값}으로 원래표현
	
	ex) 	/gr*/  == /gr{0,} - g, r중 하나라도 존재하면 어떤형식이든 매칭가능

		"grrrrrrrr" - 매칭됨
		"grow" - 매칭됨
		"get" - 매칭됨
		"program" - gr에 됨 매칭됨
		"js Programming" - gr, g에 매칭됨

 - ?
	0회 또는 1회로 사용되는 문자
	{0,1}로 표현된다
	
	ex) /e?le?/  : "ele" , "el" , "le", "l" 중 하나 매칭

	    "angel" - "el"에 매칭
	    "angle" - "le"에 매칭
	    "also" - "l"에 매칭
	    
 - +	
	1회 이상 연속으로 반복되는 문자
	{1,}으로 표현된다

	ex) /co+/
	
		count	: co에 매칭
		cnt	: 매칭안됨

 - .
	임의의 문자 한개를 표현(모든 문자)
	
	ex) /.n/  : 
	
		an apple		:  an에 매칭
		angel			:  an에 매칭
		an apple is on tree 	:  an, on에 매칭

 -{n}
	n은 정수
	n번 사용된 경우 매칭	
	
	ex) /r{3}/
	
		grr	: 매칭안됨
		grrrrr	: rrr 매칭됨
		grrr	: rrr 매칭됨

 -{n,m}
	n,m은 정수
	최소 n번, 최대 m번 사용될 경우 매칭

	n<=m
	m이 생략된다면 무한(반복)으로 허용됨

	ex) /a{1,3}
	
		band		: a 매칭됨  
		baaaaaam	: aaa 매칭됨
		bond		: a없음 매칭안됨
 	

 ** ? 의 특수기능
		
	횟수를 표현하는 특수문자( * , + , {} )들은 최대한 많은 데이터를 매칭시키려고 한다

	횟수 표현 문자 뒤에  ?를 사용하면 최대한 짧게 매칭시킨다

	ex) /[a-z]/
	
		all test : 소문자들 모두 각각 7개 매칭됨
	
	ex2) /[a-z]+/
	
		all test : all, test에 매칭

	ex3) /[a-z]+?/

		all test : all teset 7개 모든 알파벳에 각각 매칭

	ex4) /[a-z]{2,3}/

		all test : all, tes에 매칭

	ex5) /[a-z]{2,3}?/

		all test : al, te에 매칭(최솟값으로 매칭되면 빠이떠남)

	** 정규식 기본 동작은 한번에 최대한 많은 문자 매칭
	** ? 를 이용한 제한 규칙은 최대한 많은 그룹을 매칭


 - (x)
	x를 하나의 그룹으로 매칭
	
	ex) /(poo){1,2}/
	
	"pooh, winnie the pooh" : poo, poo 매칭
	"poopoopoo" 	: poopoo, poo 매칭
	"pooopoopoo	: poo, poopoo 매칭

 - x|y
	x 또는 y에 매칭 (or 둘중에 하나)

	ex) /apple|banana/
	
	5 apple		: apple에 매칭 
	apple and banana: apple,banana에 매칭
	red banana	: banana에 매칭
	

 - [xyz]
	대괄호 내부에 있는 문자들을 각각 매칭
	
	ex)/[abcde]  ==  /a|b|c|d|e/
	
	apple : a,e에 매칭
	banana : b,a,a,a에 매칭

	** 만약, [a-e]라고 사용하면 a~e문자들을 각각 매칭한다

	/[a-z]/ -소문자 
	/[A-Z]/ -대문자
	/[0-9]/ -숫자

	/[a-zA-z0-9]/ -영문자 숫자
	/[ㄱ-ㅎ]/ -자음
	/[ㅏ-ㅣ]/ -모음
	/[가-힣]/ -한글 전체
	/[ㄱ-ㅎㅏ-ㅣ가-힣]/ -한글 모든 조합 문자


 - [^xyz] 
	제외시킬 문자 집합을 표현
	
	ex) /[^abcde]/ : abcde 제외하고 나머지 문자
	
		apple - p,p,l에 매칭
		banana - n,n에 매칭

 - [] 대괄호의 축약형 
	
	\d : 숫자 [0-9]
	\D : 숫자가 아닌 것, [^0-9]

	\w : 단어 문자, 밑줄 포함, 영숫자 문자 , [A-za-z0-9_]
	\W : 단어가 아닌것, [^a-zA-Z0-9_]

	\s : 공백문자
	\S : 공백문자가 아닌것

	\t : tab탭문자

	\n : 개행문자

	\b : 경계선 문자(boundary), 문자가 끝나는 곳
	\B : 경계선문자가 아닌 것

		ex) /a\b/ -"a"뒤에 경계선인 문자 매칭(a로 끝나는부분)
			: \b가 앞에있다면 a로 시작하는 문자 매칭
		apple banana : 맨뒤의 a 매칭 
		



	** [\b] : 백스페이스문자

