< 정규 표현식, Regular Expression >

 - 특정 규칙을 가진 문자열이나 문자열 집합을 표현하는데 사용하는 형식 언어

 - 문자열에서 특정 패턴의 문자열을 검색하거나 치환할 때 사용한다

 - 형식에 맞는 데이터를 입력했는지 검증할 때 사용한다(<form>검증,  Validation)

 - 정규식이라고도 불린다

 
< 정규 표현식 생성 방법 >

 1. 정규식 리터럴 상수
	정규식을 '/'(슬래시)로 감싸는 방법으로 표현한다
	ex) var regEx = /abc/

 2. RegExp 객체를 생성
	RegExp 객체의 생성자 함수를 호출하는 방법으로 표현
	ex) var regObj = new RegExp("abc")

 
<  정규표현식 사용 패턴 >

 1. 단순패턴
	완전히 일치하는 문자열을 대응시킬 때 사용
	ex) /abc/ -> "abc"
	    /Hello/ -> "Hello RegExp"

 2. 특수 문자 패턴
	특수한 형식의 패턴을 적용하여 문자열을 대응시킬 때 사용
	
< 정규식 특수 문자 >

  - \
	다음 문자로 오는 값이 특수문자가 아니라 평범한 문자임을 알림

	ex) /a*/  : a뒤에 몇개든 올수잇음(a가 0개 이상인 패턴)
	    /a\*/ : a* 인 단순패턴 - 진짜로 a*

	뒤에오는 문자와 합쳐서 특수 문자가 되기도 함
	ex) /\d/  -숫자(digit)

 - ^ (carrot)
	데이터의 시작에 매칭
	
	ex) /^A/ - 문자열의 시작이 대문자A인 패턴
	    	
	    "an A" - 매칭되지 않음 
	    "A b" - 매칭
	    "An" - 매칭

	    /A/  - 문장이 아니라 A로 시작하는 모든 A를 다찾음

 - $
	데이터의 끝에 매칭
	
	ex) /t$/ - 끝이 t 로 끝나야함
	
	    "eater" - 매칭되지않음
	    "eat" - 매칭
 
 ** ^와 $를 같이 사용할 때 의미
	
	ex) /^eat$/ - e로 시작되고 가운데 a라는 글자가 존재하고  마지막이 t로 끝나는 문자열 -결국 eat
	
	<form> 검증(validation)할 때 사용하는 패턴 
	입력된 온전한 단어만 검사할 때 사용한다
	
	
 - *
	0회 이상 연속으로 반복되는 문자(앞문자중 1개만 존재하면 나머지는 모든 문자 상관없음)
	{0,}로 표현하기도 한다 / {최솟값, 최댓값}으로 원래표현
	
	ex) 	/gr*/  == /gr{0,} - g, r중 하나라도 존재하면 어떤형식이든 매칭가능

		"grrrrrrrr" - 매칭됨
		"grow" - 매칭됨
		"get" - 매칭됨
		"program" - gr에 됨 매칭됨
		"js Programming" - gr, g에 매칭됨

 - ?
	0회 또는 1회로 사용되는 문자
	{0,1}로 표현된다
	
	ex) /e?le?/  : "ele" , "el" , "le", "l" 중 하나 매칭

	    "angel" - "el"에 매칭
	    "angle" - "le"에 매칭
	    "also" - "l"에 매칭
